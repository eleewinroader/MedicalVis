var prefecture_id = <%= @prefecture.id %>;

function x(d) { return d.hospital_days; }
function y(d) { return d.patient_count; }
//function radius(d) { return d.population; }
function radius(d) {
  if (d.prefecture_id == prefecture_id) {
    return 50000000;
  } else {
    return 10000000;
  }
}
function color(d) {
  if (d.prefecture_id == prefecture_id) {
    return '#ff7f0e';
  } else {
    return '#eee';
  }
}
function key(d) { return d.name; }

var margin = {top: 19.5, right: 19.5, bottom: 19.5, left: 39.5},
    width = 960 - margin.right,
    height = 500 - margin.top - margin.bottom;

var xScale = d3.scale.linear().domain([0, 50]).range([0, width]),
    yScale = d3.scale.linear().domain([0, 1000]).range([height, 0]),
    radiusScale = d3.scale.sqrt().domain([0, 5e8]).range([0, 40]);
    //colorScale = d3.scale.category10().range();

var xAxis = d3.svg.axis().scale(xScale).orient("bottom"),
    yAxis = d3.svg.axis().scale(yScale).orient("left");

var svg = d3.select("#chart").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);

svg.append("g")
    .attr("class", "y axis")
    .call(yAxis);

svg.append("text")
    .attr("class", "x label")
    .attr("text-anchor", "end")
    .attr("x", width)
    .attr("y", height - 6)
    .text("平均在院日数（日）");

svg.append("text")
    .attr("class", "y label")
    .attr("text-anchor", "end")
    .attr("y", 6)
    .attr("dy", ".75em")
    .attr("transform", "rotate(-90)")
    .text("患者数（人）");

var label = svg.append("text")
    .attr("class", "year label")
    .attr("text-anchor", "end")
    .attr("y", height - 24)
    .attr("x", width)
    .text(2007);

d3.json("/json/hospitals.json", function(nations) {

  var bisect = d3.bisector(function(d) { return d[0]; });

  var dot = svg.append("g")
      .attr("class", "dots")
      .selectAll(".dot")
      .data(interpolateData(2007))
      .enter().append("circle")
      .attr("class", function(d) {
        if (d.prefecture_id == prefecture_id) {
          return 'dot touchable';
        } else {
          return 'dot';
        }
      })
      .attr("title", function(d) {
        return d.name;
      })
      .attr("id", function(d) {
        return d.id;
      })
      .style("fill", function(d) { 
        //return colorScale[color(d)]; 
        return color(d);
      })
      .call(position)
      .sort(reverse_order);

  dot.append("title")
      .text(function(d) { return d.name; });

  var box = label.node().getBBox();

  var overlay = svg.append("rect")
        .attr("class", "overlay")
        .attr("x", box.x)
        .attr("y", box.y)
        .attr("width", box.width)
        .attr("height", box.height)
        .on("mouseover", enableInteraction);

  // svg.transition()
  //     .duration(30000)
  //     .ease("linear")
  //     .tween("year", tweenYear)
  //     .each("end", enableInteraction);

  function position(dot) {
    dot .attr("cx", function(d) { return xScale(x(d)); })
        .attr("cy", function(d) { return yScale(y(d)); })
        .attr("r", function(d) { return radiusScale(radius(d)); });
  }

  function order(a, b) {
    return radius(b) - radius(a);
  }

  function reverse_order(a, b) {
    return radius(a) - radius(b);
  }

  function enableInteraction() {
    var yearScale = d3.scale.linear()
        .domain([2007, 2012])
        .range([box.x + 10, box.x + box.width - 10])
        .clamp(true);

    svg.transition().duration(0);

    overlay
        .on("mouseover", mouseover)
        .on("mouseout", mouseout)
        .on("mousemove", mousemove)
        .on("touchmove", mousemove);

    function mouseover() {
      label.classed("active", true);
    }

    function mouseout() {
      label.classed("active", false);
    }

    function mousemove() {
      displayYear(yearScale.invert(d3.mouse(this)[0]));
    }
  }

  function tweenYear() {
    var year = d3.interpolateNumber(1800, 2009);
    return function(t) { displayYear(year(t)); };
  }

  function displayYear(year) {
    dot.data(interpolateData(year), key).call(position).sort(reverse_order);
    label.text(Math.round(year));
  }

  function interpolateData(year) {
    return nations.map(function(d) {
      return {
        id: d.id,
        region_id: d.region_id,
        prefecture_id: d.prefecture_id,
        name: d.name,
        hospital_days: interpolateValues(d.hospital_days, year),
        patient_count: interpolateValues(d.patient_count, year)
      };
    });
  }

  function interpolateValues(values, year) {
    var i = bisect.left(values, year, 0, values.length - 1),
        a = values[i];
    if (i > 0) {
      var b = values[i - 1],
          t = (year - a[0]) / (b[0] - a[0]);
      return a[1] * (1 - t) + b[1] * t;
    }
    return a[1];
  }
});